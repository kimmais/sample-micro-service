name: Deploy to Stage

on:
  pull_request:
    branches: [ main ]
    types: [closed]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: stage
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configura as credenciais da AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_STAGE_REGION }}
    - name: Realiza login na AWS
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Constroi a imagem e envia ao ECS
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.APP_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ secrets.APP_NAME }} --query taskDefinition > task-definition.json
    - name: Preencha o novo ID de imagem na definição de tarefa Amazon ECS
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ secrets.APP_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.APP_NAME }}
        cluster: ${{ secrets.APP_NAME }}
        wait-for-service-stability: true
